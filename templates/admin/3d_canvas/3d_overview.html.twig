{% set products = hookable_metadata.context.products %}

{% block body %}
    <script type="module"
            src="https://unpkg.com/@google/model-viewer@^3/dist/model-viewer.min.js">
    </script>
    <div class="page-body">
        <div class="container-xl">
            <div class="position-relative z-1 bg-white mb-5">
                <div class="accordion" id="699811880">
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse1" aria-expanded="false" aria-controls="collapse1">
                            <span class="d-flex gap-2">
                                <span class="d-flex align-items-center">
                                    <svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true">
                                        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 10a2 2 0 1 0 4 0a2 2 0 0 0-4 0m2-6v4m0 4v8m4-4a2 2 0 1 0 4 0a2 2 0 0 0-4 0m2-12v10m0 4v2m4-13a2 2 0 1 0 4 0a2 2 0 0 0-4 0m2-3v1m0 4v11"/>
                                    </svg>
                                </span>
                                Filtry
                            </span>
                                <span class="accordion-button-toggle">
                                <svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true">
                                    <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m6 9l6 6l6-6"/>
                                </svg>
                            </span>
                            </button>
                        </h2>
                        <div id="collapse1" class="accordion-collapse collapse" data-bs-parent="#699811880">
                            <div class="accordion-body">
                                <form method="get" action="" novalidate>
                                    <div class="sylius-filters">
                                        <div class="sylius-filters__item">
                                            <div class="sylius-filters__string">
                                                <div class="mb-3 field">
                                                    <label class="form-label" for="criteria_code_type">Kod</label>
                                                    <select id="criteria_code_type" name="criteria[code][type]" class="form-select">
                                                        <option value="contains">Zawiera</option>
                                                        <option value="not_contains">Nie zawiera</option>
                                                        <option value="equal">Równe</option>
                                                        <option value="not_equal">Różne od</option>
                                                        <option value="empty">Brak</option>
                                                        <option value="not_empty">Nie pusty</option>
                                                        <option value="starts_with">Rozpoczyna się od</option>
                                                        <option value="ends_with">Kończy się na</option>
                                                        <option value="in">W</option>
                                                        <option value="not_in">Nie w</option>
                                                    </select>
                                                </div>
                                                <div class="mb-3 field">
                                                    <label for="criteria_code_value" class="form-label">Wartość</label>
                                                    <input type="text" id="criteria_code_value" name="criteria[code][value]" placeholder="Wartość" class="form-control" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="sylius-filters__item">
                                            <div class="sylius-filters__string">
                                                <div class="mb-3 field">
                                                    <label class="form-label" for="criteria_name_type">Nazwa</label>
                                                    <select id="criteria_name_type" name="criteria[name][type]" class="form-select">
                                                        <option value="contains">Zawiera</option>
                                                        <option value="not_contains">Nie zawiera</option>
                                                        <option value="equal">Równe</option>
                                                        <option value="not_equal">Różne od</option>
                                                        <option value="empty">Brak</option>
                                                        <option value="not_empty">Nie pusty</option>
                                                        <option value="starts_with">Rozpoczyna się od</option>
                                                        <option value="ends_with">Kończy się na</option>
                                                        <option value="in">W</option>
                                                        <option value="not_in">Nie w</option>
                                                    </select>
                                                </div>
                                                <div class="mb-3 field">
                                                    <label for="criteria_name_value" class="form-label">Wartość</label>
                                                    <input type="text" id="criteria_name_value" name="criteria[name][value]" placeholder="Wartość" class="form-control" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        <button type="submit" class="btn btn-primary">
                                            <svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true">
                                                <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 10a2 2 0 1 0 4 0a2 2 0 0 0-4 0m2-6v4m0 4v8m4-4a2 2 0 1 0 4 0a2 2 0 0 0-4 0m2-12v10m0 4v2m4-13a2 2 0 1 0 4 0a2 2 0 0 0-4 0m2-3v1m0 4v11"/>
                                            </svg>
                                            Filtruj
                                        </button>
                                        <a href="/admin/3d-canvas" class="btn">
                                            Zresetuj
                                        </a>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Kontener na model 3D i listę produktów -->
            <div class="card">
                <div class="row g-0">
                    <aside class="col-12 col-md-3 border-end" style="max-height:calc(100vh - 200px); overflow:auto;">
                        <ul class="list-group list-group-flush" id="productList">
                            {% for product in products %}
                                {% set image = product.images|first %}
                                {% set path = image.path is not null
                                    ? image.path|imagine_filter('sylius_shop_product_small_thumbnail')
                                    : asset('build/shop/images/200x200.png') %}

                                <li class="list-group-item p-2">
                                    <a href="#" class="d-flex align-items-center text-reset text-decoration-none"
                                       data-model="{{ asset(product.model3dPath) }}"
                                       data-code="{{ product.code }}"
                                       >
                                        <img src="{{ path }}" width="60" height="60" class="rounded me-2" alt="">
                                        <div class="fw-medium">{{ product.translation.name }}</div>
{#                                        <span>{{ product.translation.name }}</span>#}
                                    </a>
                                </li>
                            {% endfor %}
                        </ul>
                    </aside>

                    <main class="col-12 col-md-9 d-flex justify-content-center align-items-center bg-light position-relative"
                          style="min-height:70vh;">
                        <model-viewer id="viewer"
                                      style="width:75%; height:75%;"
                                      alt="Podgląd 3D"
                                      ar
                                      environment-image="neutral"
                                      auto-rotate
                                      camera-controls>
                        </model-viewer>
{#                        <canvas id="viewerCanvas" style="width: 75%; height: 75%;"></canvas>#}

                        <div id="placeholder" class="position-absolute text-muted fs-4">
                            ← Wybierz produkt po lewej
                        </div>
                        <div class="position-absolute bottom-0 end-0 m-3">
                            <button id="saveBtn" class="btn btn-outline-primary shadow-sm d-none">Zapisz zmiany</button>
                            <button id="exportBtn" onclick="exportGLB()" class="btn btn-outline-primary shadow-sm d-none">
                                Wyeksportuj model 3D produktu
                            </button>
                        </div>
                        <input type="color" id="colorPicker"
                               class="position-absolute top-0 end-0 m-3 form-control form-control-color d-none"
                               value="#ff0000" title="Wybierz kolor" />
                    </main>
                    <script type="module">
                        const viewer = document.getElementById('viewer');
                        const picker = document.getElementById('colorPicker');
                        const exportBtn = document.getElementById("exportBtn");
                        const saveBtn = document.getElementById("saveBtn");
                        const placeholder = document.getElementById("placeholder");
                        const productLinks = document.querySelectorAll('#productList a');

                        function hexToRGBA(hex) {
                            return [
                                parseInt(hex.slice(1, 3), 16) / 255,
                                parseInt(hex.slice(3, 5), 16) / 255,
                                parseInt(hex.slice(5, 7), 16) / 255,
                                1
                            ];
                        }

                        function rgbaToHex([r, g, b]) {
                            return "#" + [r, g, b].map(x => {
                                const hex = Math.round(x * 255).toString(16);
                                return hex.padStart(2, '0');
                            }).join('');
                        }

                        // Funkcja do eksportu modelu
                        async function exportGLB() {
                            const glTF = await viewer.exportScene();
                            const file = new File([glTF], "export.glb");
                            const link = document.createElement("a");
                            link.download = file.name;
                            link.href = URL.createObjectURL(file);
                            link.click();
                        }

                        window.exportGLB = exportGLB;

                        // Obsługa wyboru produktu
                        productLinks.forEach(link => {
                            link.addEventListener('click', async (e) => {
                                e.preventDefault();
                                productLinks.forEach(a => a.classList.remove('active'));
                                link.classList.add('active');

                                const modelUrl = link.getAttribute('data-model');
                                const code = link.getAttribute('data-code');

                                if (!modelUrl || !code) return;

                                // Resetuj widok
                                viewer.removeAttribute('src');
                                // placeholder.style.display = 'block';
                                exportBtn.classList.add('d-none');
                                saveBtn.classList.add('d-none');

                                let colorHex = null;

                                // Pobierz kolor z backendu
                                try {
                                    const res = await fetch(`/admin/3d-canvas/get-color/${code}`);
                                    if (res.ok) {
                                        const data = await res.json();
                                        if (data.color) {
                                            colorHex = data.color;
                                        }
                                    }
                                } catch (err) {
                                    console.warn("Nie udało się pobrać koloru:", err);
                                }

                                // Załaduj model
                                viewer.setAttribute('src', modelUrl);

                                // Obsługa po załadowaniu modelu
                                viewer.addEventListener('load', () => {
                                    const material = viewer.model?.materials?.[0];
                                    if (material?.pbrMetallicRoughness) {
                                        if (colorHex) {
                                            const rgba = hexToRGBA(colorHex);
                                            material.pbrMetallicRoughness.setBaseColorFactor(rgba);
                                            picker.value = colorHex;
                                        } else {
                                            const currentColor = material.pbrMetallicRoughness.baseColorFactor;
                                            if (currentColor) {
                                                picker.value = rgbaToHex(currentColor);
                                            }
                                        }

                                        // Obsługa zmiany koloru
                                        picker.oninput = () => {
                                            const rgba = hexToRGBA(picker.value);
                                            material.pbrMetallicRoughness.setBaseColorFactor(rgba);
                                        };
                                    }

                                    placeholder.style.display = 'none';
                                    picker.classList.remove('d-none');
                                    exportBtn.classList.remove('d-none');
                                    saveBtn.classList.remove('d-none');
                                }, { once: true });
                            });
                        });

                        // Obsługa zapisu koloru
                        saveBtn.addEventListener('click', async () => {
                            const activeLink = document.querySelector('#productList a.active');
                            if (!activeLink) {
                                alert("Nie wybrano produktu!");
                                return;
                            }

                            const code = activeLink.getAttribute('data-code');
                            const colorHex = picker.value;

                            try {
                                const res = await fetch('/admin/3d-canvas/set-color', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'X-Requested-With': 'XMLHttpRequest',
                                    },
                                    body: JSON.stringify({ code, color: colorHex })
                                });

                                if (!res.ok) throw new Error("Błąd zapisu");

                                const data = await res.json();
                                alert("Zapisano kolor: " + data.color);
                            } catch (err) {
                                console.error(err);
                                alert("Nie udało się zapisać koloru.");
                            }
                        });
                    </script>
                </div>
            </div>
        </div>
    </div>
{% endblock %}
