services:
    # Default configuration for services in *this* file
    _defaults:
        # Automatically injects dependencies in your services
        autowire: true

        # Automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true

        # Allows optimizing the container by removing unused services; this also means
        # fetching services directly from the container via $container->get() won't work
        public: false

    _instanceof:
        Sylius\Bundle\ResourceBundle\Controller\ResourceController:
            autowire: false
        Sylius\Bundle\ResourceBundle\Form\Type\AbstractResourceType:
            autowire: false

    # Makes classes in src/ available to be used as services;
    # this creates a service per class whose id is the fully-qualified class name
    Sylius\Component\Core\Factory\CartItemFactoryInterface: '@sylius.custom_factory.order_item'
    Sylius\Component\Core\Repository\ProductVariantRepositoryInterface: '@sylius.repository.product_variant'
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Kernel.php}'
    App\Form\Extension\ProductTypeExtension:
        arguments:
            $projectDir: '%kernel.project_dir%'
        tags:
            - { name: form.type_extension }
    App\Form\Extension\ProductVariantTypeExtension:
        tags:
            - { name: form.type_extension }
    App\EventListener\AdminMenuSubscriber:
        tags:
            - { name: kernel.event_subscriber }
    # Controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']
